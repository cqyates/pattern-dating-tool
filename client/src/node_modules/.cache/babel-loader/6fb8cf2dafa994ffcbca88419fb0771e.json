{"ast":null,"code":"var defaultOptions = {\n  // workerPath: 'https://cdn.jsdelivr.net/gh/naptha/tesseract.js@0.2.0/dist/worker.js',\n  corePath: 'https://cdn.jsdelivr.net/gh/naptha/tesseract.js-core@0.1.0/index.js',\n  langPath: 'https://tessdata.projectnaptha.com/3.02/'\n};\n\nif (process.env.TESS_ENV === \"development\") {\n  console.debug('Using Development Configuration');\n  defaultOptions.workerPath = location.protocol + '//' + location.host + '/dist/worker.dev.js?nocache=' + Math.random().toString(36).slice(3);\n} else {\n  var version = require('../../package.json').version;\n\n  defaultOptions.workerPath = 'https://cdn.jsdelivr.net/gh/naptha/tesseract.js@' + version + '/dist/worker.js';\n}\n\nexports.defaultOptions = defaultOptions;\n\nexports.spawnWorker = function spawnWorker(instance, workerOptions) {\n  if (Blob && URL) {\n    var blob = new Blob(['importScripts(\"' + workerOptions.workerPath + '\");'], {\n      type: 'application/javascript'\n    });\n    var worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    var worker = new Worker(workerOptions.workerPath);\n  }\n\n  worker.onmessage = function (e) {\n    var packet = e.data;\n\n    instance._recv(packet);\n  };\n\n  return worker;\n};\n\nexports.terminateWorker = function (instance) {\n  instance.worker.terminate();\n};\n\nexports.sendPacket = function sendPacket(instance, packet) {\n  loadImage(packet.payload.image, function (img) {\n    packet.payload.image = img;\n    instance.worker.postMessage(packet);\n  });\n};\n\nfunction loadImage(image, cb) {\n  if (typeof image === 'string') {\n    if (/^\\#/.test(image)) {\n      // element css selector\n      return loadImage(document.querySelector(image), cb);\n    } else if (/(blob|data)\\:/.test(image)) {\n      // data url\n      var im = new Image();\n      im.src = image;\n\n      im.onload = e => loadImage(im, cb);\n\n      im.onerror = e => {\n        throw e;\n      };\n\n      return;\n    } else {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', image, true);\n      xhr.responseType = \"blob\";\n\n      xhr.onload = e => {\n        if (xhr.status >= 400) {\n          throw new Error('Fail to get image as Blob');\n        } else {\n          loadImage(xhr.response, cb);\n        }\n      };\n\n      xhr.onerror = e => {\n        throw e;\n      };\n\n      xhr.send(null);\n      return;\n    }\n  } else if (image instanceof File) {\n    // files\n    var fr = new FileReader();\n\n    fr.onload = e => loadImage(fr.result, cb);\n\n    fr.onerror = e => {\n      throw e;\n    };\n\n    fr.readAsDataURL(image);\n    return;\n  } else if (image instanceof Blob) {\n    return loadImage(URL.createObjectURL(image), cb);\n  } else if (image.getContext) {\n    // canvas element\n    return loadImage(image.getContext('2d'), cb);\n  } else if (image.tagName == \"IMG\" || image.tagName == \"VIDEO\") {\n    // image element or video element\n    var c = document.createElement('canvas');\n    c.width = image.naturalWidth || image.videoWidth;\n    c.height = image.naturalHeight || image.videoHeight;\n    var ctx = c.getContext('2d');\n    ctx.drawImage(image, 0, 0);\n    return loadImage(ctx, cb);\n  } else if (image.getImageData) {\n    // canvas context\n    var data = image.getImageData(0, 0, image.canvas.width, image.canvas.height);\n    return loadImage(data, cb);\n  } else {\n    return cb(image);\n  }\n\n  throw new Error('Missing return in loadImage cascade');\n}","map":null,"metadata":{},"sourceType":"script"}