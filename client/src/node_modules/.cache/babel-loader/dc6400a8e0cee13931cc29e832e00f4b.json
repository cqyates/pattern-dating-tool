{"ast":null,"code":"/**\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nmodule.exports = iPage => {\n  const page = { ...iPage,\n    paragraphs: [],\n    lines: [],\n    words: [],\n    symbols: []\n  };\n  page.blocks.forEach(iBlock => {\n    const block = { ...iBlock,\n      page,\n      lines: [],\n      words: [],\n      symbols: []\n    };\n    block.paragraphs.forEach(iPara => {\n      const para = { ...iPara,\n        block,\n        page,\n        words: [],\n        symbols: []\n      };\n      para.lines.forEach(iLine => {\n        const line = { ...iLine,\n          paragraph: para,\n          block,\n          page,\n          symbols: []\n        };\n        line.words.forEach(iWord => {\n          const word = { ...iWord,\n            line,\n            paragraph: para,\n            block,\n            page\n          };\n          word.symbols.forEach(iSym => {\n            const sym = { ...iSym,\n              word,\n              line,\n              paragraph: para,\n              block,\n              page\n            };\n            sym.line.symbols.push(sym);\n            sym.paragraph.symbols.push(sym);\n            sym.block.symbols.push(sym);\n            sym.page.symbols.push(sym);\n          });\n          word.paragraph.words.push(word);\n          word.block.words.push(word);\n          word.page.words.push(word);\n        });\n        line.block.lines.push(line);\n        line.page.lines.push(line);\n      });\n      para.page.paragraphs.push(para);\n    });\n  });\n  return page;\n};","map":null,"metadata":{},"sourceType":"script"}