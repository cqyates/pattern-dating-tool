{"ast":null,"code":"var _slicedToArray = require(\"/Users/coreyyates/Desktop/pattern-dating-tool/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst bmp = require('bmp-js');\n\nconst fileType = require('file-type');\n\nmodule.exports = (TessModule, iBuf, yres = 70) => {\n  const buf = Buffer.from(iBuf);\n  const type = fileType(buf);\n  let bytesPerPixel = 0;\n  let data = null;\n  let pix = null;\n  let w = 0;\n  let h = 0;\n  /*\n   * Although leptonica should support reading bmp, there is a bug of \"compressed BMP files\".\n   * As there is no solution, we need to use bmp-js for now.\n   * @see https://groups.google.com/forum/#!topic/tesseract-ocr/4mPD9zTxdxE\n   */\n\n  if (type && type.mime === 'image/bmp') {\n    const bmpBuf = bmp.decode(buf);\n    data = TessModule._malloc(bmpBuf.data.length * Uint8Array.BYTES_PER_ELEMENT);\n    TessModule.HEAPU8.set(bmpBuf.data, data);\n    w = bmpBuf.width;\n    h = bmpBuf.height;\n    bytesPerPixel = 4;\n  } else {\n    const ptr = TessModule._malloc(buf.length * Uint8Array.BYTES_PER_ELEMENT);\n\n    TessModule.HEAPU8.set(buf, ptr);\n    pix = TessModule._pixReadMem(ptr, buf.length);\n\n    if (TessModule.getValue(pix + 7 * 4, 'i32') === 0) {\n      /*\n       * Set a yres default value to prevent warning from tesseract\n       * See kMinCredibleResolution in tesseract/src/ccstruct/publictypes.h\n       */\n      TessModule.setValue(pix + 7 * 4, yres, 'i32');\n    }\n\n    var _Array$fill$map = Array(2).fill(0).map((v, idx) => TessModule.getValue(pix + idx * 4, 'i32'));\n\n    var _Array$fill$map2 = _slicedToArray(_Array$fill$map, 2);\n\n    w = _Array$fill$map2[0];\n    h = _Array$fill$map2[1];\n  }\n\n  return {\n    w,\n    h,\n    bytesPerPixel,\n    data,\n    pix\n  };\n};","map":null,"metadata":{},"sourceType":"script"}