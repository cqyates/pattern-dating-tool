{"ast":null,"code":"/*globals define, module, Symbol */\n\n/*jshint -W056 */\n(function (globals) {\n  'use strict';\n\n  var strings, messages, predicates, functions, assert, not, maybe, collections, slice, neginf, posinf, isArray, haveSymbols;\n  strings = {\n    v: 'value',\n    n: 'number',\n    s: 'string',\n    b: 'boolean',\n    o: 'object',\n    t: 'type',\n    a: 'array',\n    al: 'array-like',\n    i: 'iterable',\n    d: 'date',\n    f: 'function',\n    l: 'length'\n  };\n  messages = {};\n  predicates = {};\n  [{\n    n: 'equal',\n    f: equal,\n    s: 'v'\n  }, {\n    n: 'undefined',\n    f: isUndefined,\n    s: 'v'\n  }, {\n    n: 'null',\n    f: isNull,\n    s: 'v'\n  }, {\n    n: 'assigned',\n    f: assigned,\n    s: 'v'\n  }, {\n    n: 'primitive',\n    f: primitive,\n    s: 'v'\n  }, {\n    n: 'includes',\n    f: includes,\n    s: 'v'\n  }, {\n    n: 'zero',\n    f: zero\n  }, {\n    n: 'infinity',\n    f: infinity\n  }, {\n    n: 'number',\n    f: number\n  }, {\n    n: 'integer',\n    f: integer\n  }, {\n    n: 'even',\n    f: even\n  }, {\n    n: 'odd',\n    f: odd\n  }, {\n    n: 'greater',\n    f: greater\n  }, {\n    n: 'less',\n    f: less\n  }, {\n    n: 'between',\n    f: between\n  }, {\n    n: 'greaterOrEqual',\n    f: greaterOrEqual\n  }, {\n    n: 'lessOrEqual',\n    f: lessOrEqual\n  }, {\n    n: 'inRange',\n    f: inRange\n  }, {\n    n: 'positive',\n    f: positive\n  }, {\n    n: 'negative',\n    f: negative\n  }, {\n    n: 'string',\n    f: string,\n    s: 's'\n  }, {\n    n: 'emptyString',\n    f: emptyString,\n    s: 's'\n  }, {\n    n: 'nonEmptyString',\n    f: nonEmptyString,\n    s: 's'\n  }, {\n    n: 'contains',\n    f: contains,\n    s: 's'\n  }, {\n    n: 'match',\n    f: match,\n    s: 's'\n  }, {\n    n: 'boolean',\n    f: boolean,\n    s: 'b'\n  }, {\n    n: 'object',\n    f: object,\n    s: 'o'\n  }, {\n    n: 'emptyObject',\n    f: emptyObject,\n    s: 'o'\n  }, {\n    n: 'nonEmptyObject',\n    f: nonEmptyObject,\n    s: 'o'\n  }, {\n    n: 'instanceStrict',\n    f: instanceStrict,\n    s: 't'\n  }, {\n    n: 'instance',\n    f: instance,\n    s: 't'\n  }, {\n    n: 'like',\n    f: like,\n    s: 't'\n  }, {\n    n: 'array',\n    f: array,\n    s: 'a'\n  }, {\n    n: 'emptyArray',\n    f: emptyArray,\n    s: 'a'\n  }, {\n    n: 'nonEmptyArray',\n    f: nonEmptyArray,\n    s: 'a'\n  }, {\n    n: 'arrayLike',\n    f: arrayLike,\n    s: 'al'\n  }, {\n    n: 'iterable',\n    f: iterable,\n    s: 'i'\n  }, {\n    n: 'date',\n    f: date,\n    s: 'd'\n  }, {\n    n: 'function',\n    f: isFunction,\n    s: 'f'\n  }, {\n    n: 'hasLength',\n    f: hasLength,\n    s: 'l'\n  }].map(function (data) {\n    var n = data.n;\n    messages[n] = 'Invalid ' + strings[data.s || 'n'];\n    predicates[n] = data.f;\n  });\n  functions = {\n    apply: apply,\n    map: map,\n    all: all,\n    any: any\n  };\n  collections = ['array', 'arrayLike', 'iterable', 'object'];\n  slice = Array.prototype.slice;\n  neginf = Number.NEGATIVE_INFINITY;\n  posinf = Number.POSITIVE_INFINITY;\n  isArray = Array.isArray;\n  haveSymbols = typeof Symbol === 'function';\n  functions = mixin(functions, predicates);\n  assert = createModifiedPredicates(assertModifier, assertImpl);\n  not = createModifiedPredicates(notModifier, notImpl);\n  maybe = createModifiedPredicates(maybeModifier, maybeImpl);\n  assert.not = createModifiedModifier(assertModifier, not);\n  assert.maybe = createModifiedModifier(assertModifier, maybe);\n  collections.forEach(createOfPredicates);\n  createOfModifiers(assert, assertModifier);\n  createOfModifiers(not, notModifier);\n  collections.forEach(createMaybeOfModifiers);\n  exportFunctions(mixin(functions, {\n    assert: assert,\n    not: not,\n    maybe: maybe\n  }));\n  /**\n   * Public function `equal`.\n   *\n   * Returns true if `lhs` and `rhs` are strictly equal, without coercion.\n   * Returns false otherwise.\n   */\n\n  function equal(lhs, rhs) {\n    return lhs === rhs;\n  }\n  /**\n   * Public function `undefined`.\n   *\n   * Returns true if `data` is undefined, false otherwise.\n   */\n\n\n  function isUndefined(data) {\n    return data === undefined;\n  }\n  /**\n   * Public function `null`.\n   *\n   * Returns true if `data` is null, false otherwise.\n   */\n\n\n  function isNull(data) {\n    return data === null;\n  }\n  /**\n   * Public function `assigned`.\n   *\n   * Returns true if `data` is not null or undefined, false otherwise.\n   */\n\n\n  function assigned(data) {\n    return data !== undefined && data !== null;\n  }\n  /**\n   * Public function `primitive`.\n   *\n   * Returns true if `data` is a primitive type, false otherwise.\n   */\n\n\n  function primitive(data) {\n    var type;\n\n    switch (data) {\n      case null:\n      case undefined:\n      case false:\n      case true:\n        return true;\n    }\n\n    type = typeof data;\n    return type === 'string' || type === 'number' || haveSymbols && type === 'symbol';\n  }\n  /**\n   * Public function `zero`.\n   *\n   * Returns true if `data` is zero, false otherwise.\n   */\n\n\n  function zero(data) {\n    return data === 0;\n  }\n  /**\n   * Public function `infinity`.\n   *\n   * Returns true if `data` is positive or negative infinity, false otherwise.\n   */\n\n\n  function infinity(data) {\n    return data === neginf || data === posinf;\n  }\n  /**\n   * Public function `number`.\n   *\n   * Returns true if `data` is a number, false otherwise.\n   */\n\n\n  function number(data) {\n    return typeof data === 'number' && data > neginf && data < posinf;\n  }\n  /**\n   * Public function `integer`.\n   *\n   * Returns true if `data` is an integer, false otherwise.\n   */\n\n\n  function integer(data) {\n    return typeof data === 'number' && data % 1 === 0;\n  }\n  /**\n   * Public function `even`.\n   *\n   * Returns true if `data` is an even number, false otherwise.\n   */\n\n\n  function even(data) {\n    return typeof data === 'number' && data % 2 === 0;\n  }\n  /**\n   * Public function `odd`.\n   *\n   * Returns true if `data` is an odd number, false otherwise.\n   */\n\n\n  function odd(data) {\n    return integer(data) && data % 2 !== 0;\n  }\n  /**\n   * Public function `greater`.\n   *\n   * Returns true if `lhs` is a number greater than `rhs`, false otherwise.\n   */\n\n\n  function greater(lhs, rhs) {\n    return number(lhs) && lhs > rhs;\n  }\n  /**\n   * Public function `less`.\n   *\n   * Returns true if `lhs` is a number less than `rhs`, false otherwise.\n   */\n\n\n  function less(lhs, rhs) {\n    return number(lhs) && lhs < rhs;\n  }\n  /**\n   * Public function `between`.\n   *\n   * Returns true if `data` is a number between `x` and `y`, false otherwise.\n   */\n\n\n  function between(data, x, y) {\n    if (x < y) {\n      return greater(data, x) && data < y;\n    }\n\n    return less(data, x) && data > y;\n  }\n  /**\n   * Public function `greaterOrEqual`.\n   *\n   * Returns true if `lhs` is a number greater than or equal to `rhs`, false\n   * otherwise.\n   */\n\n\n  function greaterOrEqual(lhs, rhs) {\n    return number(lhs) && lhs >= rhs;\n  }\n  /**\n   * Public function `lessOrEqual`.\n   *\n   * Returns true if `lhs` is a number less than or equal to `rhs`, false\n   * otherwise.\n   */\n\n\n  function lessOrEqual(lhs, rhs) {\n    return number(lhs) && lhs <= rhs;\n  }\n  /**\n   * Public function `inRange`.\n   *\n   * Returns true if `data` is a number in the range `x..y`, false otherwise.\n   */\n\n\n  function inRange(data, x, y) {\n    if (x < y) {\n      return greaterOrEqual(data, x) && data <= y;\n    }\n\n    return lessOrEqual(data, x) && data >= y;\n  }\n  /**\n   * Public function `positive`.\n   *\n   * Returns true if `data` is a positive number, false otherwise.\n   */\n\n\n  function positive(data) {\n    return greater(data, 0);\n  }\n  /**\n   * Public function `negative`.\n   *\n   * Returns true if `data` is a negative number, false otherwise.\n   */\n\n\n  function negative(data) {\n    return less(data, 0);\n  }\n  /**\n   * Public function `string`.\n   *\n   * Returns true if `data` is a string, false otherwise.\n   */\n\n\n  function string(data) {\n    return typeof data === 'string';\n  }\n  /**\n   * Public function `emptyString`.\n   *\n   * Returns true if `data` is the empty string, false otherwise.\n   */\n\n\n  function emptyString(data) {\n    return data === '';\n  }\n  /**\n   * Public function `nonEmptyString`.\n   *\n   * Returns true if `data` is a non-empty string, false otherwise.\n   */\n\n\n  function nonEmptyString(data) {\n    return string(data) && data !== '';\n  }\n  /**\n   * Public function `contains`.\n   *\n   * Returns true if `data` is a string that contains `substring`, false\n   * otherwise.\n   */\n\n\n  function contains(data, substring) {\n    return string(data) && data.indexOf(substring) !== -1;\n  }\n  /**\n   * Public function `match`.\n   *\n   * Returns true if `data` is a string that matches `regex`, false otherwise.\n   */\n\n\n  function match(data, regex) {\n    return string(data) && !!data.match(regex);\n  }\n  /**\n   * Public function `boolean`.\n   *\n   * Returns true if `data` is a boolean value, false otherwise.\n   */\n\n\n  function boolean(data) {\n    return data === false || data === true;\n  }\n  /**\n   * Public function `object`.\n   *\n   * Returns true if `data` is a plain-old JS object, false otherwise.\n   */\n\n\n  function object(data) {\n    return Object.prototype.toString.call(data) === '[object Object]';\n  }\n  /**\n   * Public function `emptyObject`.\n   *\n   * Returns true if `data` is an empty object, false otherwise.\n   */\n\n\n  function emptyObject(data) {\n    return object(data) && Object.keys(data).length === 0;\n  }\n  /**\n   * Public function `nonEmptyObject`.\n   *\n   * Returns true if `data` is a non-empty object, false otherwise.\n   */\n\n\n  function nonEmptyObject(data) {\n    return object(data) && Object.keys(data).length > 0;\n  }\n  /**\n   * Public function `instanceStrict`.\n   *\n   * Returns true if `data` is an instance of `prototype`, false otherwise.\n   */\n\n\n  function instanceStrict(data, prototype) {\n    try {\n      return data instanceof prototype;\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Public function `instance`.\n   *\n   * Returns true if `data` is an instance of `prototype`, false otherwise.\n   * Falls back to testing constructor.name and Object.prototype.toString\n   * if the initial instanceof test fails.\n   */\n\n\n  function instance(data, prototype) {\n    try {\n      return instanceStrict(data, prototype) || data.constructor.name === prototype.name || Object.prototype.toString.call(data) === '[object ' + prototype.name + ']';\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Public function `like`.\n   *\n   * Tests whether `data` 'quacks like a duck'. Returns true if `data` has all\n   * of the properties of `archetype` (the 'duck'), false otherwise.\n   */\n\n\n  function like(data, archetype) {\n    var name;\n\n    for (name in archetype) {\n      if (archetype.hasOwnProperty(name)) {\n        if (data.hasOwnProperty(name) === false || typeof data[name] !== typeof archetype[name]) {\n          return false;\n        }\n\n        if (object(data[name]) && like(data[name], archetype[name]) === false) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Public function `array`.\n   *\n   * Returns true if `data` is an array, false otherwise.\n   */\n\n\n  function array(data) {\n    return isArray(data);\n  }\n  /**\n   * Public function `emptyArray`.\n   *\n   * Returns true if `data` is an empty array, false otherwise.\n   */\n\n\n  function emptyArray(data) {\n    return array(data) && data.length === 0;\n  }\n  /**\n   * Public function `nonEmptyArray`.\n   *\n   * Returns true if `data` is a non-empty array, false otherwise.\n   */\n\n\n  function nonEmptyArray(data) {\n    return array(data) && greater(data.length, 0);\n  }\n  /**\n   * Public function `arrayLike`.\n   *\n   * Returns true if `data` is an array-like object, false otherwise.\n   */\n\n\n  function arrayLike(data) {\n    return assigned(data) && greaterOrEqual(data.length, 0);\n  }\n  /**\n   * Public function `iterable`.\n   *\n   * Returns true if `data` is an iterable, false otherwise.\n   */\n\n\n  function iterable(data) {\n    if (!haveSymbols) {\n      // Fall back to `arrayLike` predicate in pre-ES6 environments.\n      return arrayLike(data);\n    }\n\n    return assigned(data) && isFunction(data[Symbol.iterator]);\n  }\n  /**\n   * Public function `includes`.\n   *\n   * Returns true if `data` contains `value`, false otherwise.\n   */\n\n\n  function includes(data, value) {\n    var iterator, iteration, keys, length, i;\n\n    if (!assigned(data)) {\n      return false;\n    }\n\n    if (haveSymbols && data[Symbol.iterator] && isFunction(data.values)) {\n      iterator = data.values();\n\n      do {\n        iteration = iterator.next();\n\n        if (iteration.value === value) {\n          return true;\n        }\n      } while (!iteration.done);\n\n      return false;\n    }\n\n    keys = Object.keys(data);\n    length = keys.length;\n\n    for (i = 0; i < length; ++i) {\n      if (data[keys[i]] === value) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Public function `hasLength`.\n   *\n   * Returns true if `data` has a length property that equals `length`, false\n   * otherwise.\n   */\n\n\n  function hasLength(data, length) {\n    return assigned(data) && data.length === length;\n  }\n  /**\n   * Public function `date`.\n   *\n   * Returns true if `data` is a valid date, false otherwise.\n   */\n\n\n  function date(data) {\n    return instanceStrict(data, Date) && integer(data.getTime());\n  }\n  /**\n   * Public function `function`.\n   *\n   * Returns true if `data` is a function, false otherwise.\n   */\n\n\n  function isFunction(data) {\n    return typeof data === 'function';\n  }\n  /**\n   * Public function `apply`.\n   *\n   * Maps each value from the `data` to the corresponding predicate and returns\n   * the result array. If the same function is to be applied across all of the\n   * data, a single predicate function may be passed in.\n   *\n   */\n\n\n  function apply(data, predicates) {\n    assert.array(data);\n\n    if (isFunction(predicates)) {\n      return data.map(function (value) {\n        return predicates(value);\n      });\n    }\n\n    assert.array(predicates);\n    assert.hasLength(data, predicates.length);\n    return data.map(function (value, index) {\n      return predicates[index](value);\n    });\n  }\n  /**\n   * Public function `map`.\n   *\n   * Maps each value from the `data` to the corresponding predicate and returns\n   * the result object. Supports nested objects. If the `data` is not nested and\n   * the same function is to be applied across all of it, a single predicate\n   * function may be passed in.\n   *\n   */\n\n\n  function map(data, predicates) {\n    assert.object(data);\n\n    if (isFunction(predicates)) {\n      return mapSimple(data, predicates);\n    }\n\n    assert.object(predicates);\n    return mapComplex(data, predicates);\n  }\n\n  function mapSimple(data, predicate) {\n    var result = {};\n    Object.keys(data).forEach(function (key) {\n      result[key] = predicate(data[key]);\n    });\n    return result;\n  }\n\n  function mapComplex(data, predicates) {\n    var result = {};\n    Object.keys(predicates).forEach(function (key) {\n      var predicate = predicates[key];\n\n      if (isFunction(predicate)) {\n        if (not.assigned(data)) {\n          result[key] = !!predicate.m;\n        } else {\n          result[key] = predicate(data[key]);\n        }\n      } else if (object(predicate)) {\n        result[key] = mapComplex(data[key], predicate);\n      }\n    });\n    return result;\n  }\n  /**\n   * Public function `all`\n   *\n   * Check that all boolean values are true\n   * in an array (returned from `apply`)\n   * or object (returned from `map`).\n   *\n   */\n\n\n  function all(data) {\n    if (array(data)) {\n      return testArray(data, false);\n    }\n\n    assert.object(data);\n    return testObject(data, false);\n  }\n\n  function testArray(data, result) {\n    var i;\n\n    for (i = 0; i < data.length; i += 1) {\n      if (data[i] === result) {\n        return result;\n      }\n    }\n\n    return !result;\n  }\n\n  function testObject(data, result) {\n    var key, value;\n\n    for (key in data) {\n      if (data.hasOwnProperty(key)) {\n        value = data[key];\n\n        if (object(value) && testObject(value, result) === result) {\n          return result;\n        }\n\n        if (value === result) {\n          return result;\n        }\n      }\n    }\n\n    return !result;\n  }\n  /**\n   * Public function `any`\n   *\n   * Check that at least one boolean value is true\n   * in an array (returned from `apply`)\n   * or object (returned from `map`).\n   *\n   */\n\n\n  function any(data) {\n    if (array(data)) {\n      return testArray(data, true);\n    }\n\n    assert.object(data);\n    return testObject(data, true);\n  }\n\n  function mixin(target, source) {\n    Object.keys(source).forEach(function (key) {\n      target[key] = source[key];\n    });\n    return target;\n  }\n  /**\n   * Public modifier `assert`.\n   *\n   * Throws if `predicate` returns false.\n   */\n\n\n  function assertModifier(predicate, defaultMessage) {\n    return function () {\n      return assertPredicate(predicate, arguments, defaultMessage);\n    };\n  }\n\n  function assertPredicate(predicate, args, defaultMessage) {\n    var argCount = predicate.l || predicate.length;\n    var message = args[argCount];\n    var ErrorType = args[argCount + 1];\n    assertImpl(predicate.apply(null, args), nonEmptyString(message) ? message : defaultMessage, isFunction(ErrorType) ? ErrorType : TypeError);\n    return args[0];\n  }\n\n  function assertImpl(value, message, ErrorType) {\n    if (value) {\n      return value;\n    }\n\n    throw new (ErrorType || Error)(message || 'Assertion failed');\n  }\n  /**\n   * Public modifier `not`.\n   *\n   * Negates `predicate`.\n   */\n\n\n  function notModifier(predicate) {\n    var modifiedPredicate = function () {\n      return notImpl(predicate.apply(null, arguments));\n    };\n\n    modifiedPredicate.l = predicate.length;\n    return modifiedPredicate;\n  }\n\n  function notImpl(value) {\n    return !value;\n  }\n  /**\n   * Public modifier `maybe`.\n   *\n   * Returns true if predicate argument is  null or undefined,\n   * otherwise propagates the return value from `predicate`.\n   */\n\n\n  function maybeModifier(predicate) {\n    var modifiedPredicate = function () {\n      if (not.assigned(arguments[0])) {\n        return true;\n      }\n\n      return predicate.apply(null, arguments);\n    };\n\n    modifiedPredicate.l = predicate.length; // Hackishly indicate that this is a maybe.xxx predicate.\n    // Without this flag, the alternative would be to iterate\n    // through the maybe predicates or use indexOf to check,\n    // which would be time-consuming.\n\n    modifiedPredicate.m = true;\n    return modifiedPredicate;\n  }\n\n  function maybeImpl(value) {\n    if (assigned(value) === false) {\n      return true;\n    }\n\n    return value;\n  }\n  /**\n   * Public modifier `of`.\n   *\n   * Applies the chained predicate to members of the collection.\n   */\n\n\n  function ofModifier(target, type, predicate) {\n    var modifiedPredicate = function () {\n      var collection, args;\n      collection = arguments[0];\n\n      if (target === 'maybe' && not.assigned(collection)) {\n        return true;\n      }\n\n      if (!type(collection)) {\n        return false;\n      }\n\n      collection = coerceCollection(type, collection);\n      args = slice.call(arguments, 1);\n\n      try {\n        collection.forEach(function (item) {\n          if ((target !== 'maybe' || assigned(item)) && !predicate.apply(null, [item].concat(args))) {\n            // TODO: Replace with for...of when ES6 is required.\n            throw 0;\n          }\n        });\n      } catch (ignore) {\n        return false;\n      }\n\n      return true;\n    };\n\n    modifiedPredicate.l = predicate.length;\n    return modifiedPredicate;\n  }\n\n  function coerceCollection(type, collection) {\n    switch (type) {\n      case arrayLike:\n        return slice.call(collection);\n\n      case object:\n        return Object.keys(collection).map(function (key) {\n          return collection[key];\n        });\n\n      default:\n        return collection;\n    }\n  }\n\n  function createModifiedPredicates(modifier, object) {\n    return createModifiedFunctions([modifier, predicates, object]);\n  }\n\n  function createModifiedFunctions(args) {\n    var modifier, object, functions, result;\n    modifier = args.shift();\n    object = args.pop();\n    functions = args.pop();\n    result = object || {};\n    Object.keys(functions).forEach(function (key) {\n      Object.defineProperty(result, key, {\n        configurable: false,\n        enumerable: true,\n        writable: false,\n        value: modifier.apply(null, args.concat(functions[key], messages[key]))\n      });\n    });\n    return result;\n  }\n\n  function createModifiedModifier(modifier, modified) {\n    return createModifiedFunctions([modifier, modified, null]);\n  }\n\n  function createOfPredicates(key) {\n    predicates[key].of = createModifiedFunctions([ofModifier.bind(null, null), predicates[key], predicates, null]);\n  }\n\n  function createOfModifiers(base, modifier) {\n    collections.forEach(function (key) {\n      base[key].of = createModifiedModifier(modifier, predicates[key].of);\n    });\n  }\n\n  function createMaybeOfModifiers(key) {\n    maybe[key].of = createModifiedFunctions([ofModifier.bind(null, 'maybe'), predicates[key], predicates, null]);\n    assert.maybe[key].of = createModifiedModifier(assertModifier, maybe[key].of);\n    assert.not[key].of = createModifiedModifier(assertModifier, not[key].of);\n  }\n\n  function exportFunctions(functions) {\n    if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return functions;\n      });\n    } else if (typeof module !== 'undefined' && module !== null && module.exports) {\n      module.exports = functions;\n    } else {\n      globals.check = functions;\n    }\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script"}