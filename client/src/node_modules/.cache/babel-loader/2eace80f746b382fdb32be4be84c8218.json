{"ast":null,"code":"/**\n *\n * The core part of tesseract.js to execute the OCR jobs.\n *\n * @fileoverview Worker for OCR jobs\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst check = require('check-types');\n\nconst resolveURL = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? require('resolve-url') : s => s;\n\nconst adapter = require('../node');\n\nconst circularize = require('./circularize');\n\nconst TesseractJob = require('./TesseractJob');\n/**\n * TesseractWorker\n * @name TesseractWorker\n * @function execute TesseractJob with a queue mechanism\n * @access public\n */\n\n\nclass TesseractWorker {\n  /**\n   * constructor\n   *\n   * @name constructor\n   * @function initialize the worker\n   * @access public\n   * @param {object} options - worker configurations\n   * @param {string} options.workerPath -\n   *     A remote path to load worker script.\n   *     In browser-like environment, it is downloaded from a CDN service.\n   *     Please update this option if you self-host the worker script.\n   *     In Node.js environment, this option is not used as the worker script is in local.\n   * @param {string} options.corePath -\n   *     A remote path to load tesseract.js-core script.\n   *     In browser-like environment, it is downloaded from a CDN service.\n   *     Please update this option if you self-host the core script.\n   *     In Node.js environment, this option is not used as the core script is in local.\n   * @param {string} options.langPath -\n   *     A remote path to load *.traineddata.gz, it is download from a CDN service.\n   *     Please update this option if you self-host the worker script.\n   * @param {string} [options.cachePath=.] - @see {@link https://github.com/jeromewu/tesseract.js-utils/blob/master/src/loadLang.js}\n   * @param {string} [options.cacheMethod=write] - @see {@link https://github.com/jeromewu/tesseract.js-utils/blob/master/src/loadLang.js}\n   * @param {string} [options.dataPath=.] - @see {@link https://github.com/jeromewu/tesseract.js-utils/blob/master/src/loadLang.js}\n   *\n   */\n  constructor(options = {}) {\n    this.worker = null;\n    this.options = { ...adapter.defaultOptions,\n      ...options\n    };\n    ['corePath', 'workerPath', 'langPath'].forEach(key => {\n      if (check.not.undefined(options[key])) {\n        this.options = { ...this.options,\n          [key]: resolveURL(options[key])\n        };\n      }\n    });\n    this._currentJob = null;\n    this._queue = [];\n  }\n  /**\n   * recognize\n   *\n   * @name recognize\n   * @function recognize text in given image\n   * @access public\n   * @param {Buffer, string} image - image to be recognized\n   * @param {string, array} [langs=eng] - languages to recognize\n   * @param {object} params - tesseract parameters\n   *\n   */\n\n\n  recognize(image, langs = 'eng', params = {}) {\n    return this._sendJob('recognize', image, langs, params);\n  }\n  /**\n   * detect\n   *\n   * @name detect\n   * @function detect language of the text in the image\n   * @access public\n   * @param {Buffer, string} image - image to be recognized\n   * @param {object} params - tesseract parameters\n   *\n   */\n\n\n  detect(image, params = {}) {\n    return this._sendJob('detect', image, 'osd', params);\n  }\n  /**\n   * recv\n   *\n   * @name recv\n   * @function handle completed job\n   * @access public\n   * @param {object} packet job data\n   */\n\n\n  recv(packet) {\n    if (this._currentJob.id === packet.jobId) {\n      this._currentJob.handle({ ...packet,\n        data: packet.status === 'resolve' && packet.action === 'recognize' ? circularize(packet.data) : packet.data\n      });\n    } else {\n      console.warn(\"Job ID \".concat(packet.jobId, \" not known.\"));\n    }\n  }\n  /**\n   * dequeue\n   *\n   * @name dequeue\n   * @function dequeue and execute the rear job\n   * @access public\n   */\n\n\n  dequeue() {\n    this._currentJob = null;\n\n    if (this._queue.length) {\n      this._queue[0]();\n    }\n  }\n  /**\n   * terminate\n   *\n   * @name terminate\n   * @function terminate the worker\n   * @access public\n   *\n   */\n\n\n  terminate() {\n    if (this.worker) {\n      adapter.terminateWorker(this);\n    }\n\n    this.worker = null;\n    this._currentJob = null;\n    this._queue = [];\n  }\n  /**\n   * _sendJob\n   *\n   * @name _sendJob\n   * @function append a new job to the job queue\n   * @access private\n   * @param {string} type job type, should be recognize or detect\n   * @param {Buffer, string} image image to recognize\n   * @param {string} lang language to recognize\n   * @param {object} params tesseract parameters\n   */\n\n\n  _sendJob(type, image, langs, params) {\n    return this._delay(job => {\n      job.send(type, {\n        image,\n        langs,\n        params,\n        options: this.options\n      });\n    });\n  }\n  /**\n   * _delay\n   *\n   * @name _delay\n   * @function delays the fn to execute until it is on the rear of the queue\n   * @access private\n   * @param {function} fn A handler function for the job\n   */\n\n\n  _delay(fn) {\n    if (check.null(this.worker)) {\n      this.worker = adapter.spawnWorker(this, this.options);\n    }\n\n    const job = new TesseractJob(this);\n\n    this._queue.push(() => {\n      this._queue.shift();\n\n      this._currentJob = job;\n      fn(job);\n    });\n\n    if (check.null(this._currentJob)) {\n      this.dequeue();\n    }\n\n    return job;\n  }\n\n}\n\nmodule.exports = TesseractWorker;","map":null,"metadata":{},"sourceType":"script"}