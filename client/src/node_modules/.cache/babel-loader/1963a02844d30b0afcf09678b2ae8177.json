{"ast":null,"code":"const adapter = require('../node/index.js');\n\nlet jobCounter = 0;\nmodule.exports = class TesseractJob {\n  constructor(instance) {\n    this.id = 'Job-' + ++jobCounter + '-' + Math.random().toString(16).slice(3, 8);\n    this._instance = instance;\n    this._resolve = [];\n    this._reject = [];\n    this._progress = [];\n    this._finally = [];\n  }\n\n  then(resolve, reject) {\n    if (this._resolve.push) {\n      this._resolve.push(resolve);\n    } else {\n      resolve(this._resolve);\n    }\n\n    if (reject) this.catch(reject);\n    return this;\n  }\n\n  catch(reject) {\n    if (this._reject.push) {\n      this._reject.push(reject);\n    } else {\n      reject(this._reject);\n    }\n\n    return this;\n  }\n\n  progress(fn) {\n    this._progress.push(fn);\n\n    return this;\n  }\n\n  finally(fn) {\n    this._finally.push(fn);\n\n    return this;\n  }\n\n  _send(action, payload) {\n    adapter.sendPacket(this._instance, {\n      jobId: this.id,\n      action: action,\n      payload: payload\n    });\n  }\n\n  _handle(packet) {\n    var data = packet.data;\n    let runFinallyCbs = false;\n\n    if (packet.status === 'resolve') {\n      if (this._resolve.length === 0) console.log(data);\n\n      this._resolve.forEach(fn => {\n        var ret = fn(data);\n\n        if (ret && typeof ret.then == 'function') {\n          console.warn('TesseractJob instances do not chain like ES6 Promises. To convert it into a real promise, use Promise.resolve.');\n        }\n      });\n\n      this._resolve = data;\n\n      this._instance._dequeue();\n\n      runFinallyCbs = true;\n    } else if (packet.status === 'reject') {\n      if (this._reject.length === 0) console.error(data);\n\n      this._reject.forEach(fn => fn(data));\n\n      this._reject = data;\n\n      this._instance._dequeue();\n\n      runFinallyCbs = true;\n    } else if (packet.status === 'progress') {\n      this._progress.forEach(fn => fn(data));\n    } else {\n      console.warn('Message type unknown', packet.status);\n    }\n\n    if (runFinallyCbs) {\n      this._finally.forEach(fn => fn(data));\n    }\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}