{"ast":null,"code":"/**\n *\n * The job exectued by worker, each job is basically a recognition of an image.\n *\n * @fileoverview Job excuted by Worker\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst adapter = require('../node/');\n/** A global job counter as part of job id */\n\n\nlet jobCounter = 0;\n\nclass TesseractJob {\n  /**\n   * constructor\n   *\n   * @name constructor\n   * @function initial a TesseractJob\n   * @access public\n   * @param {object} worker - An instance of TesseractWorker\n   */\n  constructor(worker) {\n    jobCounter += 1;\n    this.id = \"Job-\".concat(jobCounter, \"-\").concat(Math.random().toString(16).slice(3, 8));\n    this._worker = worker;\n    /**\n     * As all the callback functions are saved in an array.\n     * Basically you can register more than callback function\n     * for then, catch, progress and finally.\n     */\n\n    this._resolve = [];\n    this._reject = [];\n    this._progress = [];\n    this._finally = [];\n  }\n  /**\n   * then\n   *\n   * @name then\n   * @function A function to chain like Promise\n   * @access public\n   * @param {function} resolve - called when the job succeeds\n   * @param {function} reject - called when the job fails\n   */\n\n\n  then(resolve, reject) {\n    return new Promise((res, rej) => {\n      if (!this._resolve.push) {\n        res(this._result);\n      } else {\n        this._resolve.push(res);\n      }\n\n      this.catch(rej);\n    }).then(resolve, reject);\n  }\n  /**\n   * catch\n   *\n   * @name catch\n   * @function register a function to call when there is an error\n   * @access public\n   * @param {function} reject - callback function for error\n   */\n\n\n  catch(reject) {\n    if (this._reject.push) {\n      this._reject.push(reject);\n    } else {\n      reject(this._reject);\n    }\n\n    return this;\n  }\n  /**\n   * progress\n   *\n   * @name progress\n   * @function register a function to show progress of the recognition,\n   *   use res.progress to print the message\n   * @access public\n   * @param {function} fn - callback function for progress information\n   */\n\n\n  progress(fn) {\n    this._progress.push(fn);\n\n    return this;\n  }\n  /**\n   * finally\n   *\n   * @name finally\n   * @function registry a callback function for final\n   * @access public\n   * @param {function} fn - callback function for final\n   */\n\n\n  finally(fn) {\n    this._finally.push(fn);\n\n    return this;\n  }\n  /**\n   * send\n   *\n   * @name send\n   * @function send specific action with payload a worker\n   * @access public\n   * @param {string} action - action to trigger, should be \"recognize\" or \"detect\"\n   * @param {object} payload - data to be consumed\n   */\n\n\n  send(action, payload) {\n    adapter.sendPacket(this._worker, {\n      jobId: this.id,\n      action,\n      payload\n    });\n  }\n  /**\n   * handle\n   *\n   * @name handle\n   * @function execute packet action\n   * @access public\n   * @param {object} packet action and payload to handle\n   */\n\n\n  handle(packet) {\n    const data = packet.data;\n    let runFinallyCbs = false;\n\n    if (packet.status === 'resolve') {\n      if (this._resolve.length === 0) console.log(data);\n\n      this._resolve.forEach(fn => {\n        const ret = fn(data);\n\n        if (ret && typeof ret.then === 'function') {\n          console.warn('TesseractJob instances do not chain like ES6 Promises. To convert it into a real promise, use Promise.resolve.');\n        }\n      });\n\n      this._resolve = data;\n\n      this._worker.dequeue();\n\n      runFinallyCbs = true;\n    } else if (packet.status === 'reject') {\n      if (this._reject.length === 0) console.error(data);\n\n      this._reject.forEach(fn => fn(data));\n\n      this._reject = data;\n\n      this._worker.dequeue();\n\n      runFinallyCbs = true;\n    } else if (packet.status === 'progress') {\n      this._progress.forEach(fn => fn(data));\n    } else {\n      console.warn('Message type unknown', packet.status);\n    }\n\n    if (runFinallyCbs) {\n      this._finally.forEach(fn => fn(data));\n    }\n  }\n\n}\n\nmodule.exports = TesseractJob;","map":null,"metadata":{},"sourceType":"script"}