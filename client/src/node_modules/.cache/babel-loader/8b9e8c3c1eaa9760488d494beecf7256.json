{"ast":null,"code":"class Store {\n  constructor(dbName = 'keyval-store', storeName = 'keyval') {\n    this.storeName = storeName;\n    this._dbp = new Promise((resolve, reject) => {\n      const openreq = indexedDB.open(dbName, 1);\n\n      openreq.onerror = () => reject(openreq.error);\n\n      openreq.onsuccess = () => resolve(openreq.result); // First time setup: create an empty object store\n\n\n      openreq.onupgradeneeded = () => {\n        openreq.result.createObjectStore(storeName);\n      };\n    });\n  }\n\n  _withIDBStore(type, callback) {\n    return this._dbp.then(db => new Promise((resolve, reject) => {\n      const transaction = db.transaction(this.storeName, type);\n\n      transaction.oncomplete = () => resolve();\n\n      transaction.onabort = transaction.onerror = () => reject(transaction.error);\n\n      callback(transaction.objectStore(this.storeName));\n    }));\n  }\n\n}\n\nlet store;\n\nfunction getDefaultStore() {\n  if (!store) store = new Store();\n  return store;\n}\n\nfunction get(key, store = getDefaultStore()) {\n  let req;\n  return store._withIDBStore('readonly', store => {\n    req = store.get(key);\n  }).then(() => req.result);\n}\n\nfunction set(key, value, store = getDefaultStore()) {\n  return store._withIDBStore('readwrite', store => {\n    store.put(value, key);\n  });\n}\n\nfunction del(key, store = getDefaultStore()) {\n  return store._withIDBStore('readwrite', store => {\n    store.delete(key);\n  });\n}\n\nfunction clear(store = getDefaultStore()) {\n  return store._withIDBStore('readwrite', store => {\n    store.clear();\n  });\n}\n\nfunction keys(store = getDefaultStore()) {\n  const keys = [];\n  return store._withIDBStore('readonly', store => {\n    // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n    // And openKeyCursor isn't supported by Safari.\n    (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {\n      if (!this.result) return;\n      keys.push(this.result.key);\n      this.result.continue();\n    };\n  }).then(() => keys);\n}\n\nexport { Store, get, set, del, clear, keys };","map":null,"metadata":{},"sourceType":"module"}