{"ast":null,"code":"/**\n * @author shaozilee\n *\n * BMP format encoder,encode 24bit BMP\n * Not support quality compression\n *\n */\nfunction BmpEncoder(imgData) {\n  this.buffer = imgData.data;\n  this.width = imgData.width;\n  this.height = imgData.height;\n  this.extraBytes = this.width % 4;\n  this.rgbSize = this.height * (3 * this.width + this.extraBytes);\n  this.headerInfoSize = 40;\n  this.data = [];\n  /******************header***********************/\n\n  this.flag = \"BM\";\n  this.reserved = 0;\n  this.offset = 54;\n  this.fileSize = this.rgbSize + this.offset;\n  this.planes = 1;\n  this.bitPP = 24;\n  this.compress = 0;\n  this.hr = 0;\n  this.vr = 0;\n  this.colors = 0;\n  this.importantColors = 0;\n}\n\nBmpEncoder.prototype.encode = function () {\n  var tempBuffer = new Buffer(this.offset + this.rgbSize);\n  this.pos = 0;\n  tempBuffer.write(this.flag, this.pos, 2);\n  this.pos += 2;\n  tempBuffer.writeUInt32LE(this.fileSize, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt32LE(this.reserved, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt32LE(this.offset, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt32LE(this.headerInfoSize, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt32LE(this.width, this.pos);\n  this.pos += 4;\n  tempBuffer.writeInt32LE(-this.height, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt16LE(this.planes, this.pos);\n  this.pos += 2;\n  tempBuffer.writeUInt16LE(this.bitPP, this.pos);\n  this.pos += 2;\n  tempBuffer.writeUInt32LE(this.compress, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt32LE(this.rgbSize, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt32LE(this.hr, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt32LE(this.vr, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt32LE(this.colors, this.pos);\n  this.pos += 4;\n  tempBuffer.writeUInt32LE(this.importantColors, this.pos);\n  this.pos += 4;\n  var i = 0;\n  var rowBytes = 3 * this.width + this.extraBytes;\n\n  for (var y = 0; y < this.height; y++) {\n    for (var x = 0; x < this.width; x++) {\n      var p = this.pos + y * rowBytes + x * 3;\n      i++; //a\n\n      tempBuffer[p] = this.buffer[i++]; //b\n\n      tempBuffer[p + 1] = this.buffer[i++]; //g\n\n      tempBuffer[p + 2] = this.buffer[i++]; //r\n    }\n\n    if (this.extraBytes > 0) {\n      var fillOffset = this.pos + y * rowBytes + this.width * 3;\n      tempBuffer.fill(0, fillOffset, fillOffset + this.extraBytes);\n    }\n  }\n\n  return tempBuffer;\n};\n\nmodule.exports = function (imgData, quality) {\n  if (typeof quality === 'undefined') quality = 100;\n  var encoder = new BmpEncoder(imgData);\n  var data = encoder.encode();\n  return {\n    data: data,\n    width: imgData.width,\n    height: imgData.height\n  };\n};","map":null,"metadata":{},"sourceType":"script"}